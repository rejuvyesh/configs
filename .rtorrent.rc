# ~/.rtorrentrc
#

# Global upload and download rate in KiB. "0" for unlimited.
throttle.global_down.max_rate.set_kb = 0
throttle.global_up.max_rate.set_kb = 0

throttle.min_peers.normal.set = 50 ; look for more peers if limit doesn't reach 50
throttle.max_peers.normal.set = 500 ; if there are 500 peers, don't allow any more

# Same as above but for seeding completed torrents (-1 = same as downloading)
throttle.min_peers.seed.set = 10
throttle.max_peers.seed.set = 100

# Maximum number of simultanious uploads per torrent.
throttle.max_uploads.set = 25

network.port_range.set = 65200-65299 ; ports to use for listening

# Start opening ports at a random position within the port range.
network.port_random.set = yes

pieces.hash.on_completion.set = yes ; check hash on finished torrents

# encryption settings
protocol.encryption.set = allow_incoming,enable_retry,prefer_plaintext

trackers.use_udp.set = yes ; setup client to use udp (stateless) trackers

# DHT clientless tracker
dht.mode.set = auto
dht.port.set = 6881
protocol.pex.set = yes

# Session tmp file (relative dir is good, absolute is bad)
session.path.set = /home/rejuvyesh/torrents/.session

# Default directory to save the downloaded torrents.
directory.default.set = ./

# Close torrents when diskspace is low.
schedule = low_diskspace,5,60,close_low_diskspace=512M

# Watch a directory for new torrents, and stop those that have been deleted (^d)
schedule = watch_directory,5,5,"load.start=./torrents*.torrent"
schedule = watch_directory_2,5,5,"load.start=~/torrents/music/*.torrent,d.directory.set=~/Music/"
schedule = watch_directory_3,5,5,"load.start=~/torrents/tv/*.torrent,d.directory.set=~/TV/"
schedule = watch_directory_4,5,5,"load.start=~/torrents/books/books/*.torrent,d.directory.set=~/books/"
schedule = untied_directory,5,5,stop_untied= ; stop torrents once removed from the client


#
## PyroScope SETTINGS
#

method.insert = pyro.extended, value|const, 1
method.insert = pyro.bin_dir, string|const, ~/dev/scripts/
method.insert = pyro.rtorrent_rc, string|const|private, "$cat=~/.pyroscope/rtorrent-0.9.2.rc"
import = $pyro.rtorrent_rc=

# TORQUE: Daemon watchdog schedule
# Must be activated by touching the "~/.pyroscope/run/pyrotorque" file!
# Set the second argument to "-v" or "-q" to change log verbosity.
schedule = pyro_watchdog,30,300,"pyro.watchdog=~/.pyroscope,"

# UI/VIEW: Show active and incomplete torrents (in view #0) and update every 20 seconds
# Items are grouped into complete, incomplete, and queued, in that order.
# Within each group, they're sorted by download and then upload speed.
branch=pyro.extended=,false=,"view.sort_current = active,greater=d.up.rate="
branch=pyro.extended=,"view.sort_current = active,\"compare=----,d.is_open=,d.complete=,d.down.rate=,d.up.rate=\""
schedule = filter_active,12,20,"view.filter = active,\"or={d.up.rate=,d.down.rate=,not=$d.complete=}\" ;view.sort=active"

# Show traffic of the last hour
network.history.depth.set = 112
schedule = network_history_sampling,1,32, network.history.sample=
method.insert = network.history.auto_scale.toggle, simple|private, "branch=network.history.auto_scale=,\"network.history.auto_scale.set=0\",\"network.history.auto_scale.set=1\""
method.insert = network.history.auto_scale.ui_toggle, simple|private, "network.history.auto_scale.toggle= ;network.history.refresh="
branch=pyro.extended=,"schedule = bind_auto_scale,0,0,\"ui.bind_key=download_list,=,network.history.auto_scale.ui_toggle=\""
